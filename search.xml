<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MongoDB聚合查询</title>
      <link href="p/2019/11/12/19111211/"/>
      <url>p/2019/11/12/19111211/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB聚合查询"><a href="#MongoDB聚合查询" class="headerlink" title="MongoDB聚合查询"></a>MongoDB聚合查询</h2><h3 id="一、Aggregate"><a href="#一、Aggregate" class="headerlink" title="一、Aggregate()"></a>一、Aggregate()</h3><p>语法格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collection.aggregate(pipeline,options)</span><br></pre></td></tr></table></figure><p>pipeline：array类型,一些列的过程<br>options：可选参数,文档<br>聚合操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// where _id = 1;</span><br><span class="line">db.customerinfo.aggregate()</span><br><span class="line">.match(&#123;&quot;_id&quot;:1&#125;)</span><br><span class="line">.project(&#123;&#125;)</span><br><span class="line">.sort(&#123;_id:-1&#125;)</span><br><span class="line">.limit(100)</span><br><span class="line">// <span class="keyword">select</span> * <span class="keyword">from</span> customerinfo</span><br><span class="line">db.customerinfo.aggregate()</span><br><span class="line">// <span class="keyword">select</span> * <span class="keyword">from</span> customerinfo <span class="keyword">where</span> _id=<span class="number">1</span></span><br><span class="line">db.customerinfo.aggregate([</span><br><span class="line">&#123;$<span class="keyword">match</span>:&#123;_id:<span class="number">1</span>&#125;&#125;</span><br><span class="line">])</span><br><span class="line">// <span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> customerinfo <span class="keyword">where</span> _id=<span class="number">1</span></span><br><span class="line">db.customerinfo.aggregate([</span><br><span class="line">&#123;$<span class="keyword">match</span>:&#123;<span class="keyword">name</span>:/a/&#125;&#125;,</span><br><span class="line">// <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line">&#123;$<span class="keyword">project</span>: &#123;<span class="keyword">name</span>:<span class="number">1</span>,age:<span class="number">1</span>&#125;&#125;,</span><br><span class="line">// <span class="keyword">select</span> <span class="keyword">name</span>,age</span><br><span class="line">&#123;$<span class="keyword">group</span>: &#123; _id: <span class="string">&quot;null&quot;</span>,<span class="keyword">num</span>:&#123;$<span class="keyword">sum</span>:<span class="number">1</span>&#125;&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组之稀疏数组</title>
      <link href="p/2018/12/17/18121721/"/>
      <url>p/2018/12/17/18121721/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数组之稀疏数组"><a href="#Java数组之稀疏数组" class="headerlink" title="Java数组之稀疏数组"></a>Java数组之稀疏数组</h1><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p>扫雷，五子棋游戏</p><p>数字1表示雷</p><ol><li>需求：布置雷时，有存盘退出和续盘的功能。</li><li>分析：因为该二维数组的很多值是默认值0，因此记录了很多没有意义的数据【有效数据只有雷】</li><li>解决：稀疏数组</li></ol><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>稀疏数组：<br>    行(row)    列(col)    值(value)<br>[0]        8        8        2<br>[1]        2        3        1<br>[2]        4        5        1</p><p>0    0    0    0    0    0    0    0<br>0    0    0    0    0    0    0    0<br>0    0    0    1    0    0    0    0<br>0    0    0    0    0    0    0    0<br>0    0    0    0    0    1    0    0<br>0    0    0    0    0    0    0    0<br>0    0    0    0    0    0    0    0<br>0    0    0    0    0    0    0    0</p><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><ul><li>使用稀疏数组，来保留类似前面的二维数组(地图等等)</li><li>把稀疏数组存盘，可以重新恢复原来的二维数组数</li><li>整体思路分析</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">array01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个二维数组 8*8     1表示雷</span></span><br><span class="line"><span class="keyword">int</span>[][] mapArr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line">mapArr[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">mapArr[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//输出原始的二维数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;原二维数组：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mapArr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mapArr[i].length; j++) &#123;</span><br><span class="line">System.out.print(mapArr[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将二维数组转换为稀疏数组</span></span><br><span class="line"><span class="comment">//1.先遍历二维数组得到非零数据的个数</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (mapArr[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建对应的系数数组</span></span><br><span class="line"><span class="keyword">int</span>[][] sparseArr = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//给系数数组赋值</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">8</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">8</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"><span class="comment">//遍历二维数组将非零的值存放到稀疏数组</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mapArr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mapArr[i].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (mapArr[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">count++;</span><br><span class="line">sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">sparseArr[count][<span class="number">2</span>] = mapArr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出稀疏数组</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;稀疏数组：&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\t行(row)\t列(col)\t值(value)&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[&quot;</span>+i+<span class="string">&quot;]\t\t&quot;</span>+sparseArr[i][<span class="number">0</span>]+<span class="string">&quot;\t\t&quot;</span>+sparseArr[i][<span class="number">1</span>]+<span class="string">&quot;\t\t&quot;</span>+sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将稀疏数组恢复成二维数组</span></span><br><span class="line"><span class="comment">//1.先读取稀疏数组的第一行，根据第一行创建二维数组</span></span><br><span class="line"><span class="keyword">int</span>[][] chessArr2 = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="comment">//2.读取稀疏数组后几行赋值给二维数组，这里是从第二行开始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;现二维数组：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr2) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">System.out.print(data+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java单向链表与双向链表</title>
      <link href="p/2018/12/12/18121220/"/>
      <url>p/2018/12/12/18121220/</url>
      
        <content type="html"><![CDATA[<h1 id="Java单向链表与双向链表"><a href="#Java单向链表与双向链表" class="headerlink" title="Java单向链表与双向链表"></a>Java单向链表与双向链表</h1><p>单链表中的数据是以结点的形式存在，每一个结点是由数据元素和下一个结点的存储的位置组成。单链表与数组相比的最大差别是：单链表的数据元素存放在内存空间的地址是不连续的，而数组的数据元素存放的地址在内存空间中是连续的，这也是为什么根据索引无法像数组那样直接就能查询到数据元素。</p><h3 id="一-单向链表实现"><a href="#一-单向链表实现" class="headerlink" title="一.单向链表实现"></a>一.单向链表实现</h3><h5 id="节点类"><a href="#节点类" class="headerlink" title="节点类"></a>节点类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储的数据</span></span><br><span class="line">Object data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上一个/下一个 节点内存地址</span></span><br><span class="line"><span class="keyword">private</span> Node before;</span><br><span class="line"><span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">getBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> before;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBefore</span><span class="params">(Node before)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.before = before;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String str = <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;data=&#x27;&quot;</span> + <span class="keyword">this</span>.getData();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">str += <span class="string">&quot;, Next=Node&#123;data=&#x27;&quot;</span>+<span class="keyword">this</span>.next.getData()+<span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.before!=<span class="keyword">null</span>)&#123;</span><br><span class="line">str += <span class="string">&quot;, Before=Node&#123;data=&#x27;&quot;</span>+<span class="keyword">this</span>.before.getData()+<span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单向链表类"><a href="#单向链表类" class="headerlink" title="单向链表类"></a>单向链表类</h5><p>对链表的增删改查，以及获某个位置的节点，在指定位置插入节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单向链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkOne</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头节点，尾节点，集合中元素个数</span></span><br><span class="line"><span class="keyword">private</span> Node head;</span><br><span class="line"><span class="keyword">private</span> Node last;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造初始化数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">head = <span class="keyword">new</span> Node(<span class="keyword">null</span>);</span><br><span class="line">head.setNext(head);</span><br><span class="line">last = head;</span><br><span class="line"><span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素，在末尾节点处添加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node addNode)</span> </span>&#123;</span><br><span class="line">Node temp = addNode;</span><br><span class="line"><span class="keyword">if</span> (head.getNext() == head) &#123;</span><br><span class="line">head.setNext(temp);</span><br><span class="line">temp.setNext(head);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">last = head;</span><br><span class="line"><span class="keyword">while</span> (last.getNext() != head) &#123;</span><br><span class="line">last = last.getNext();</span><br><span class="line">&#125;</span><br><span class="line">last.setNext(temp);</span><br><span class="line">temp.setNext(head);</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素， 在指定位置处插入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Node addNode)</span> </span>&#123;</span><br><span class="line">Node temp = addNode;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;索引错误&quot;</span> + index);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">last = head;</span><br><span class="line"><span class="keyword">while</span> (last.getNext() != head &amp;&amp; i &lt; index) &#123;</span><br><span class="line">last = last.getNext();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">temp.setNext(last.getNext());</span><br><span class="line">last.setNext(temp);</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">Node value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;索引错误&quot;</span> + index);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">last = head;</span><br><span class="line"><span class="keyword">while</span> (last.getNext() != head &amp;&amp; i &lt; index) &#123;</span><br><span class="line">last = last.getNext();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">value = last.getNext();</span><br><span class="line">last.setNext(last.getNext().getNext());</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;索引错误&quot;</span> + index);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">last = head;</span><br><span class="line"><span class="keyword">while</span> (last.getNext() != head &amp;&amp; i &lt; index) &#123;</span><br><span class="line">last = last.getNext();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> last.getNext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLink</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">System.out.println(getNode(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkOne linkOne = <span class="keyword">new</span> LinkOne();</span><br><span class="line">    linkOne.add(<span class="keyword">new</span> Node(<span class="string">&quot;zs&quot;</span>));</span><br><span class="line">    linkOne.add(<span class="keyword">new</span> Node(<span class="string">&quot;lisi&quot;</span>));</span><br><span class="line">    linkOne.add(<span class="keyword">new</span> Node(<span class="string">&quot;ww&quot;</span>));</span><br><span class="line">    System.out.println(linkOne.getSize());</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----查询-----&quot;</span>);</span><br><span class="line">    linkOne.printLink();</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----新增-----&quot;</span>);</span><br><span class="line">    linkOne.insert(<span class="number">0</span>,<span class="keyword">new</span> Node(<span class="string">&quot;xx&quot;</span>));</span><br><span class="line">    linkOne.printLink();</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----移除-----&quot;</span>);</span><br><span class="line">    linkOne.remove(<span class="number">1</span>);</span><br><span class="line">    linkOne.printLink();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p>3</p><p>—–查询—–<br>Node{data=’zs, Next=Node{data=’lisi’}}<br>Node{data=’lisi, Next=Node{data=’ww’}}<br>Node{data=’ww, Next=Node{data=’null’}}</p><p>—–新增—–<br>Node{data=’xx, Next=Node{data=’zs’}}<br>Node{data=’zs, Next=Node{data=’lisi’}}<br>Node{data=’lisi, Next=Node{data=’ww’}}<br>Node{data=’ww, Next=Node{data=’null’}}</p><p>—–移除—–<br>Node{data=’xx, Next=Node{data=’lisi’}}<br>Node{data=’lisi, Next=Node{data=’ww’}}<br>Node{data=’ww, Next=Node{data=’null’}}</p><h3 id="二-双向链表实现"><a href="#二-双向链表实现" class="headerlink" title="二.双向链表实现"></a>二.双向链表实现</h3><p>LinkedList集合底层采用了双向链表数据结构。对于链表数据结构来说，随机增删效率高，检索效率低。链表中的元素在空间储存上，内存地址不连续</p><h5 id="双向链表类"><a href="#双向链表类" class="headerlink" title="双向链表类"></a>双向链表类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双向链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkTwo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node head;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表增加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(Node addNode)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">head = addNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node current = <span class="keyword">this</span>.head ;</span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">this</span>.length==<span class="number">0</span> )&#123;  <span class="comment">// 空链表</span></span><br><span class="line"><span class="keyword">this</span>.head.setNext(addNode); ;</span><br><span class="line">addNode.setBefore(<span class="keyword">this</span>.head);</span><br><span class="line">addNode.setNext(<span class="keyword">null</span>) ;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;                <span class="comment">// 链表内节点</span></span><br><span class="line"><span class="keyword">while</span>( current.getNext()!=<span class="keyword">null</span> )&#123;</span><br><span class="line">current = current.getNext() ;</span><br><span class="line">&#125;</span><br><span class="line">current.setNext(addNode);</span><br><span class="line">addNode.setNext(<span class="keyword">null</span>);</span><br><span class="line">addNode.setBefore(current);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印链表</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printLink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node curNode = head;</span><br><span class="line"><span class="keyword">while</span> (curNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(curNode);</span><br><span class="line">curNode = curNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">Node curNode = head;</span><br><span class="line"><span class="keyword">while</span> (curNode  != <span class="keyword">null</span>) &#123;</span><br><span class="line">len++;</span><br><span class="line">curNode = curNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkTwo linkTwo = <span class="keyword">new</span> LinkTwo();</span><br><span class="line">    linkTwo.insertNode(<span class="keyword">new</span> Node(<span class="string">&quot;zs&quot;</span>));</span><br><span class="line">    linkTwo.insertNode(<span class="keyword">new</span> Node(<span class="string">&quot;lisi&quot;</span>));</span><br><span class="line">    linkTwo.insertNode(<span class="keyword">new</span> Node(<span class="string">&quot;wangwu&quot;</span>));</span><br><span class="line">    linkTwo.insertNode(<span class="keyword">new</span> Node(<span class="string">&quot;zhaoliu&quot;</span>));</span><br><span class="line">    linkTwo.printLink();</span><br><span class="line">    <span class="keyword">int</span> len = linkTwo.getLength();</span><br><span class="line">    System.out.println(<span class="string">&quot;长度：&quot;</span>+len);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><p>Node{data=’zs, Next=Node{data=’lisi’}}<br>Node{data=’lisi, Next=Node{data=’wangwu’}, Before=Node{data=’zs’}}<br>Node{data=’wangwu, Next=Node{data=’zhaoliu’}, Before=Node{data=’lisi’}}<br>Node{data=’zhaoliu, Before=Node{data=’wangwu’}}</p><p>长度：4</p><h3 id="三-链表优缺点"><a href="#三-链表优缺点" class="headerlink" title="三.链表优缺点"></a>三.链表优缺点</h3><p>优：</p><p>元素在空间储存上内存地址不连续，随机增删元素不会造成大量元素位移，增删效率高</p><p>缺：</p><p>不可通过数学表达式计算被查找元素的内存地址，每次都从头节点遍历，查询到为止，查询效率低</p><h3 id="四-LinkedList与ArrayList-Vector储存性能和特性"><a href="#四-LinkedList与ArrayList-Vector储存性能和特性" class="headerlink" title="四.LinkedList与ArrayList,Vector储存性能和特性"></a>四.LinkedList与ArrayList,Vector储存性能和特性</h3><p>ArrayList和Vector都是用数组方式存储数据，数组元素数大于实际储存的数据以便增加和插入元素，都允许直接按照序号索引元素，但插入元素要设计到数组元素的移动等内存操作，所以插入数据慢，索引数据快。Vector是线程安全的，性能较ArrayList差。可以用Collections.synchronizedList(list01)将ArrayList变成线程安全的。</p><p>LinkedList使用双向链表实现存储，索引需要进行向前或向后遍历，但插入只需记录本项前后项即可，因此插入速度快。线程不安全。一般需求都是在集合末尾加入元素，所以ArrayList使用较LinkedList多</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的synchronized面试题</title>
      <link href="p/2018/11/18/18111821/"/>
      <url>p/2018/11/18/18111821/</url>
      
        <content type="html"><![CDATA[<h1 id="Java的synchronized面试题"><a href="#Java的synchronized面试题" class="headerlink" title="Java的synchronized面试题"></a>Java的synchronized面试题</h1><blockquote><p>例题1</p></blockquote><p>有个类中有两个方法，eat和drink，eat为同步方法</p><p>问：掉用eat方法后，drink方法是否要等5秒后执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ques01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass myClass = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> MyThread(myClass);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> MyThread(myClass);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 保证t1先执行</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyClass myClass;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span> <span class="params">(MyClass myClass)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myClass = myClass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;t1&quot;</span>))&#123;</span><br><span class="line">            myClass.eat();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;t2&quot;</span>))&#123;</span><br><span class="line">            myClass.drink();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat start&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;drink start&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;drink end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p>eat start<br>drink start<br>drink end<br>eat end</p><p>答：drink不需要排队，因为drink没有synchronized，不需要eat的锁</p><p>在drink方法上加synchronized，则需要等待eat执行5s后才执行drink</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;drink start&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;drink end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例题2</p></blockquote><p>将上述问题Thread2线程的Class重新new一个，drink依然不需要等待eat执行完</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ques02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyQuesClass myQuesClass = <span class="keyword">new</span> MyQuesClass();</span><br><span class="line">        MyQuesClass myQuesClass2 = <span class="keyword">new</span> MyQuesClass();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> MyQuesThread02(myQuesClass);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> MyQuesThread02(myQuesClass2);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 保证t1先执行</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQuesThread02</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyQuesClass myQuesClass;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQuesThread02</span> <span class="params">(MyQuesClass myQuesClass)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myQuesClass = myQuesClass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;t1&quot;</span>))&#123;</span><br><span class="line">            myQuesClass.eat();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;t2&quot;</span>))&#123;</span><br><span class="line">            myQuesClass.drink();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQuesClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat start&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;drink start&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;drink end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p>eat start<br>drink start<br>drink end<br>eat end</p><p>在两方法中加入static变为静态方法，此时找的是类锁，drink需要排队等待，无论创建几个对象，类锁只有一把</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat start&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;drink start&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;drink end&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程同步锁</title>
      <link href="p/2018/11/17/18111720/"/>
      <url>p/2018/11/17/18111720/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程同步锁"><a href="#Java多线程同步锁" class="headerlink" title="Java多线程同步锁"></a>Java多线程同步锁</h1><h3 id="一-synchronized使用"><a href="#一-synchronized使用" class="headerlink" title="一.synchronized使用"></a>一.synchronized使用</h3><p>修饰对象的几种分类： </p><ol><li>修饰代码块，被修饰的代码块称为同步语句块，作用的对象是调用这个代码块的对象</li><li>修饰方法，被修饰的方法称为同步方法，作用的对象是调用这个方法的对象</li><li>修饰静态方法，作用的对象是这个类的所有对象</li><li>修饰类，作用主的对象是这个类的所有对象</li></ol><h3 id="二-同步与异步"><a href="#二-同步与异步" class="headerlink" title="二.同步与异步"></a>二.同步与异步</h3><blockquote><p>产生安全问题的3个条件</p></blockquote><ol><li>多线程并发</li><li>有共享数据</li><li>共享数据存在修改行为</li></ol><blockquote><p>同步：排队</p></blockquote><p>A线程要请求某个资源，但是此资源正在被B线程使用中，因为同步机制存在，A线程请求不到，怎么办，A线程只能等待下去</p><blockquote><p>异步：并发</p></blockquote><p>A线程要请求某个资源，但是此资源正在被B线程使用中，因为没有同步机制存在，A线程仍然请求的到，A线程无需等待，异步会提升性能效率</p><h3 id="三-wait和notify"><a href="#三-wait和notify" class="headerlink" title="三.wait和notify"></a>三.wait和notify</h3><p><strong>wait</strong>：Object类的方法。作用是挂起当前线程，释放获取到的锁，直到别的线程调用了这个对象的notify或notifyAll方法。<br><strong>notify</strong>：Object类的方法。作用是唤醒因调用wait挂起的线程，如果有过个线程，随机唤醒一个。<br><strong>notifyAll</strong>：Object类的方法。作用是唤醒全部因调用wait挂起的线程。</p><p>举例：一个生产者和消费者</p><p>生产者生成一个obj唤醒消费者消费，消费完后唤醒生产者生产，一直循环下去。</p><p><strong>生产者线程类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(List list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟一直生产</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 给仓库对象上锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                <span class="keyword">if</span> (list.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 仓库有货，进入等待，释放之前占有的list集合的锁</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        list.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 仓库为0,可以生产</span></span><br><span class="line">                Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">                list.add(obj);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+obj);</span><br><span class="line">                <span class="comment">// 唤醒消费者消费</span></span><br><span class="line">                list.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者线程类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">List</span> <span class="title">list</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(List list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟一直消费</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                <span class="keyword">if</span> (list.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 仓库无货，停止消费，释放锁</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        list.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 仓库有货,继续消费</span></span><br><span class="line">                Object obj = list.remove(<span class="number">0</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+obj);</span><br><span class="line">                <span class="comment">// 唤醒生产者生产</span></span><br><span class="line">                list.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 仓库对象</span></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生产者与消费者线程</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(list));</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(list));</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;生产者线程&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;消费者线程&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p>生产者线程–&gt;java.lang.Object@d829ada<br>消费者线程–&gt;java.lang.Object@d829ada<br>生产者线程–&gt;java.lang.Object@2bf47083<br>消费者线程–&gt;java.lang.Object@2bf47083<br>生产者线程–&gt;java.lang.Object@53beae5e<br>消费者线程–&gt;java.lang.Object@53beae5e<br>生产者线程–&gt;java.lang.Object@200badc3<br>消费者线程–&gt;java.lang.Object@200badc3<br>生产者线程–&gt;java.lang.Object@39c6b752<br>消费者线程–&gt;java.lang.Object@39c6b752</p><p>……</p><h3 id="四-死锁"><a href="#四-死锁" class="headerlink" title="四.死锁"></a>四.死锁</h3><blockquote><p>死锁</p></blockquote><p>当多个线程各自占有一些共享资源，并且<strong>互相等待其他线程占有的资源</strong>才能进行，从而导致两个或者多个线程都在等待对方释放资源，都停止执行的情况。</p><p>线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Object o1;</span><br><span class="line">    Object o2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread01</span><span class="params">(Object o1,Object o2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.o1 = o1;</span><br><span class="line">        <span class="keyword">this</span>.o2 = o2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (o1)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread02</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Object o1;</span><br><span class="line">    Object o2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread02</span><span class="params">(Object o1,Object o2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.o1 = o1;</span><br><span class="line">        <span class="keyword">this</span>.o2 = o2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (o2)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">        Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> MyThread01(o1,o2);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> MyThread02(o1,o2);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决</p><p>不要出现 <strong>锁的嵌套</strong> ，将等待后获取另一个锁的代码放到第一个加锁的后面就可以解决了。尽量不要让 一个同步代码块 同时拥有<strong>两个以上的对象的锁</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java抽象类与接口</title>
      <link href="p/2018/11/15/18111519/"/>
      <url>p/2018/11/15/18111519/</url>
      
        <content type="html"><![CDATA[<h1 id="Java抽象类与接口"><a href="#Java抽象类与接口" class="headerlink" title="Java抽象类与接口"></a>Java抽象类与接口</h1><h3 id="一-抽象类"><a href="#一-抽象类" class="headerlink" title="一.抽象类"></a>一.抽象类</h3><p>抽象类是半抽象</p><p>抽象类中方法不必都是抽象的，但含有抽象方法的类必须为抽象类</p><p>抽象类不可实例化对象，但是可以有构造方法</p><p>子类可以是抽象类也可以是非抽象类</p><p>如果子类没有实现父抽象类中的所有抽象方法，那么子类也必须定义为abstract类型</p><p>因为抽象方法要在子类中实现，所以不能有抽象构造方法或抽象静态方法</p><h3 id="二-接口"><a href="#二-接口" class="headerlink" title="二.接口"></a>二.接口</h3><p>约束和实习的分离，是特殊的抽象类。如果一个类实现了某个接口，那么它就继承了这个接口的抽象方法。接口只是一种形式，自身不能做任何事情，接口是完全抽象的</p><h3 id="三-抽象类与接口区别"><a href="#三-抽象类与接口区别" class="headerlink" title="三.抽象类与接口区别"></a>三.抽象类与接口区别</h3><ol><li>抽象类可以有构造方法，接口不可以</li><li>抽象类可以有普通成员变量，接口中只有静态成员变量和抽象方法</li><li>抽象类可以包含非抽象的普通方法，接口中所有方法都必须是抽象的，不可以有方法体</li><li>抽象类中方法访问类型可以是public，protected，接口中抽象方法只能是public，默认public abstract类型</li><li>抽象类中可以包含静态方法，接口不可以</li><li>抽象类和接口都可以包含静态成员变量，接口中的只能是public static final类型</li><li>一个类可以实现多个接口，但是只能继承一个抽象类</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java位运算</title>
      <link href="p/2018/10/14/18101420/"/>
      <url>p/2018/10/14/18101420/</url>
      
        <content type="html"><![CDATA[<h1 id="Java位运算"><a href="#Java位运算" class="headerlink" title="Java位运算"></a>Java位运算</h1><p>Java语言支持以下运算符</p><ul><li>算术运算符：+, -, *, / , %, ++, –,</li><li>赋值运算符=</li><li>关系运算符:&gt;, &lt;, &gt;=, &lt;=, ==, !=instanceof</li><li>逻辑运算符：&amp;&amp;, ||, !</li><li>位运算符：&amp;, |, ^,~, &gt;&gt;,&lt;&lt;,&gt;&gt;&gt;</li><li>条件运算符？：</li><li>扩展赋值运算符:+=, -=, *=, /=</li></ul><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>前言：位运算符主要用来对操作数二进制的位进行运算。按位运算表示按每个二进制位（bit）进行计算，其操作数和运算结果都是整型值。Java 语言中的位运算符分为<font color=red><strong>位逻辑运算符</strong></font>和<strong>位移运算符</strong>两类</p><p>A =0011 1100 </p><p>B=0000 1101</p><h5 id="amp-：按位与"><a href="#amp-：按位与" class="headerlink" title="&amp;：按位与"></a>&amp;：按位与</h5><p>只有两个操作数对应位同为1时，结果为1，其余全为0. （或者是只要有一个操作数为0，结果就为0）</p><p>A&amp;B=00001100</p><h5 id="：按位或"><a href="#：按位或" class="headerlink" title="|：按位或"></a>|：按位或</h5><p>只有两个操作数对应位同为0时，结果为0，其余全为1.（或者是只要有一个操作数为1，结果就为1）</p><p>A|B=00111101</p><h5 id="：按位非"><a href="#：按位非" class="headerlink" title="~：按位非"></a>~：按位非</h5><p>取反同位和原来数字相反</p><p>~B =11110010</p><h5 id="：按位异或"><a href="#：按位异或" class="headerlink" title="^：按位异或"></a>^：按位异或</h5><p>亦或两同位相同为0，不同为1</p><p>A^B=00110001</p><h5 id="lt-lt-：左位移运算符"><a href="#lt-lt-：左位移运算符" class="headerlink" title="&lt;&lt;：左位移运算符"></a>&lt;&lt;：左位移运算符</h5><p>左移 *2 </p><h5 id="gt-gt-：右位移运算符"><a href="#gt-gt-：右位移运算符" class="headerlink" title="&gt;&gt;：右位移运算符"></a>&gt;&gt;：右位移运算符</h5><p>右移 /2</p><p>二进制运算 </p><p>2&lt;&lt;3=16 </p><p>0000 0000 0 </p><p>0000 0001 1 </p><p>0000 0010 2 </p><p>0000 0011 3 </p><p>0000 0100 4</p><p>0001 0000 16</p><h3 id="符合运算符"><a href="#符合运算符" class="headerlink" title="符合运算符"></a>符合运算符</h3><p>前言：所有的二进制位运算符都有一种将赋值与位运算组合在一起的简写形式。复合位赋值运算符由赋值运算符与位逻辑运算符和位移运算符组合而成。表 3 列出了组合后的复合位赋值运算符。</p><h5 id="amp-：按位与赋值"><a href="#amp-：按位与赋值" class="headerlink" title="&amp;=：按位与赋值"></a>&amp;=：按位与赋值</h5><p>等价于 num 1=num 1 &amp; num2</p><h5 id="：按位或赋值"><a href="#：按位或赋值" class="headerlink" title="|=：按位或赋值"></a>|=：按位或赋值</h5><p>num 1=num 1 | num2</p><h5 id="：按位异或赋值"><a href="#：按位异或赋值" class="headerlink" title="^=：按位异或赋值"></a>^=：按位异或赋值</h5><p>num 1=num 1 ^ num2</p><h5 id="：按位取反赋值"><a href="#：按位取反赋值" class="headerlink" title="~=：按位取反赋值"></a>~=：按位取反赋值</h5><p>等价于 num 1=num 1 ~ num2</p><h5 id="lt-lt-：按位左移赋值"><a href="#lt-lt-：按位左移赋值" class="headerlink" title="&lt;&lt;=：按位左移赋值"></a>&lt;&lt;=：按位左移赋值</h5><p>等价于 num 1=num 1 « num2</p><h5 id="gt-gt-：按位右移赋值"><a href="#gt-gt-：按位右移赋值" class="headerlink" title="&gt;&gt;=：按位右移赋值"></a>&gt;&gt;=：按位右移赋值</h5><p>等价于num 1=num 1 » num2</p><h3 id="食用方式"><a href="#食用方式" class="headerlink" title="食用方式"></a>食用方式</h3><p>奇偶性</p><p>n&amp;1 == 1?”奇数”:”偶数”</p><p>交换两个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] nums)&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = nums.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&gt;i)&#123;</span><br><span class="line">        nums[i]= nums[i]^nums[j];</span><br><span class="line">        nums[j] = nums[j]^nums[i];</span><br><span class="line">        nums[i] = nums[i]^nums[j];</span><br><span class="line">        j--;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绝对值</p><p>(a^(a&gt;&gt;31))-(a&gt;&gt;31)</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何更换Hexo的主题</title>
      <link href="p/2018/09/16/18091612/"/>
      <url>p/2018/09/16/18091612/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo切换主题"><a href="#Hexo切换主题" class="headerlink" title="Hexo切换主题"></a>Hexo切换主题</h2><h3 id="1-Git下载安装想要主题"><a href="#1-Git下载安装想要主题" class="headerlink" title="1.Git下载安装想要主题"></a>1.Git下载安装想要主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>下载后，将压缩包解压到自己的博客根目录themes/文件夹下</p><p>修改_config.yml文件，将theme的值写成主题名字，例：theme: newtheme</p><h3 id="2-部署主题"><a href="#2-部署主题" class="headerlink" title="2.部署主题"></a>2.部署主题</h3><p>本地预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>打开<a href="http://localhost:4000/">http://localhost:4000/</a>预览</p><p>部署博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p><a href="https://github.com/liu783/">GitHub地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
